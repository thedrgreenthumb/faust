// Rectangles project faust library
//
//
//
// License: MIT

//--------------------------------------------------------------------

import("math.lib");
import("music.lib");
import("filter.lib");
import("oscillator.lib");

//Cross connection
X = (_,_)<:(!,_,_,!);

//Is variable in range
is_range(min_val, max_val, x) = x>=min_val,x<max_val:*:_;

//Convert time to samples
get_delay_length(x) = x*SR:_*0.001;

//Selectors for multiply number of inputs (indexing from 0 to N)
select4(val) = select3(val),_:select2(val == 3); 
select5(val) = select3(rng1),select2(rng2):select2(rng3)
	with {
		rng1 = val;
		rng2 = val<:(_>=3:_<=4),_-3:_*_:>_;
		rng3 = val>=3;
	}; 
select6(val) = select3(rng1),select3(rng2):select2(rng3)
	with {
		rng1 = val;
		rng2 = val<:(_>=3:_<=5),_-3:_*_:>_;
		rng3 = val>=3;
	}; 
select8(val) = select4(rng1),select4(rng2):select2(rng3)
	with {
		rng1 = val;
		rng2 = val<:(_>=4:_<=7),_-4:_*_:>_;
		rng3 = val>=4;		
	};
select12(val) = select6(rng1),select6(rng2):select2(rng3)
	with {
		rng1 = val;
		rng2 = val<:(_>=6:_<=11),_-6:_*_:>_;
		rng3 = val>=6;
	};
select16(val) = select8(rng1),select8(rng2):select2(rng3)
	with {
		rng1 = val;
		rng2 = val<:(_>=8:_<=15),_-8:_*_:>_;
		rng3 = val>=8;
	};

//Mixers for multiply number of inputs, range from 0 to N
mix2(c,x,y) = (1-c)*x + c*y; 
mix3(val) = _,_,_<:select3(val),select3(val+1):mix2(val-floor(val));
mix4(val) = _,_,_,_<:select4(val),select4(val+1):mix2(val-floor(val));
mix5(val) = _,_,_,_,_<:select5(val),select5(val+1):mix2(val - floor(val));
mix8(val) = _,_,_,_,_,_,_,_<:select8(val),select8(val+1):mix2(val-floor(val));





//------ Coloration filters ------
coloration_filter1(coloration) = _<:(lowshelf(5,(1 - coloration)*12,440),
	highshelf(5,coloration*12,880)):>_*db2linear(-15);

coloration_filter2(lf, hf) = _<:(lowshelf(5,lf*12,440),
	highshelf(5,hf*12,880)):>_*db2linear(-12);




//------ Ducking switcher ------
duck_switcher(att, rel, amount) = amp_follower_ud(att,rel):
	_*amount:_>1:(1 - _):
	smooth(tau2pole(0.03));






//------ Reverb ------

//Comb and Allpass filters
allpass(dt,fb) = (_,_ <: (*(fb),_:+:@(dt)), -) ~ _ : (!,_);
comb(dt, fb, damp) = (+:@(dt)) ~ (*(1-damp) : (+ ~ *(damp)) : *(fb));

//Schoeders reverb, typical arguments (0.75, 0.3, 0, 3000)
schoeders2(fb1, fb2, damp, spread)
	= _ <:	comb(comb1+spread, fb1, damp),
			comb(comb2+spread, fb1, damp),
			comb(comb3+spread, fb1, damp),
			comb(comb4+spread, fb1, damp),
			comb(comb5+spread, fb1, damp),
			comb(comb6+spread, fb1, damp),
			comb(comb7+spread, fb1, damp),
			comb(comb8+spread, fb1, damp)
		+>
		 	allpass (ap1, fb2):
			allpass (ap2, fb2)
		with {
			comb1	= 1116;
			comb2	= 1188;
			comb3	= 1277;
			comb4	= 1356;
			comb5	= 1422;
			comb6	= 1491;
			comb7	= 1557;
			comb8	= 1617;

			ap1	= 556;
			ap2	= 441;
		};

//------ Delay lines emulation ------

//Bits reduction, used at digital delay emulation
bits_reducing(bits) = _*pow(2,bits):ceil:_/pow(2,bits):lowpass(4,4000);

//Analog delay emulation, typical tape speeds: 
//9.5,19,38 cm/s : 1.5,3,6 Hz if capstan D = 2 cm
//Typical arguments:(4000,6,25,-70)
tape_capstan_emu(band_width, del_osc_freq, del_width, noise_lev_db) = _:lowpass(4,band_width):
	_+((noise_lev_db:db2linear:smooth(0.999))*lfnoise0(12000)):fdelay(1024,osc(del_osc_freq):_+1:_/2:_*del_width);

//Analog/digital emulation combination
analog_digital(val) = _<:bits_reducing(8),@(10),tape_capstan_emu(4000,6,25,-70):mix3(val); 

//------ Combined oscillators ------

//Sine + toothes + noise
comb_osc1(freq) = _;


